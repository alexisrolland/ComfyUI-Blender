"""Operator to render a depth map."""
import os
import shutil

import bpy

from ..utils import get_filepath, show_error_popup


class ComfyBlenderOperatorRenderDepthMap(bpy.types.Operator):
    """Operator to render a depth map."""

    bl_idname = "comfy.render_depth_map"
    bl_label = "Render Depth Map"
    bl_description = "Render a depth map from the camera."

    workflow_property: bpy.props.StringProperty(name="Workflow Property")

    def execute(self, context):
        """Execute the operator."""

        scene = context.scene
        if not scene.camera:
            error_message = "No camera found"
            show_error_popup(error_message)
            return {'CANCELLED'}

        # Store original render settings
        original_filepath = scene.render.filepath
        original_file_format = scene.render.image_settings.file_format
        original_color_mode = scene.render.image_settings.color_mode
        original_color_depth = scene.render.image_settings.color_depth
        original_compression = scene.render.image_settings.compression
        original_display_device = scene.display_settings.display_device
        original_view_transform = scene.view_settings.view_transform

        # Get path to inputs folder
        addon_prefs = context.preferences.addons["comfyui_blender"].preferences
        inputs_folder = str(addon_prefs.inputs_folder)
        os.makedirs(inputs_folder, exist_ok=True)

        # Extraneous file generated by Blender renderer
        extra_filepath = os.path.join(inputs_folder, "tmp.png")

        # Set up the scene for rendering
        scene.render.filepath = extra_filepath
        scene.render.image_settings.file_format = "PNG"
        scene.render.image_settings.color_mode = "RGB"
        scene.render.image_settings.color_depth = "16"
        scene.render.image_settings.compression = 0
        scene.display_settings.display_device = "Display P3"
        scene.view_settings.view_transform = "Raw"

        # Enable Z pass
        scene.view_layers["ViewLayer"].use_pass_z = True

        # Create a new node tree for compositing
        scene.use_nodes = True
        tree = scene.node_tree
        tree.nodes.clear()

        # Create nodes
        rlayers_node = tree.nodes.new(type="CompositorNodeRLayers")
        map_range_node = tree.nodes.new(type="CompositorNodeMapRange")
        output_file_node = tree.nodes.new(type="CompositorNodeOutputFile")
        output_file_node.base_path = inputs_folder

        # Link nodes
        tree.links.new(rlayers_node.outputs["Depth"], map_range_node.inputs["Value"])
        tree.links.new(map_range_node.outputs["Value"], output_file_node.inputs["Image"])

        # Get closest and furthest vertices from the camera
        cam_location = scene.camera.matrix_world.translation
        min_distance = float('inf')
        max_distance = 0.0

        for obj in scene.objects:
            if obj.type == "MESH":
                for vertex in obj.data.vertices:
                    world_coord = obj.matrix_world @ vertex.co
                    distance = (cam_location - world_coord).length
                    if distance < min_distance:
                        min_distance = distance
                    if distance > max_distance:
                        max_distance = distance
        
        # Update Map Range node
        map_range_node.inputs[1].default_value = min_distance  # From Min
        map_range_node.inputs[2].default_value = max_distance  # From Max
        map_range_node.inputs[3].default_value = 1 # To Min
        map_range_node.inputs[4].default_value = 0 # To Max

        # Render the scene
        bpy.ops.render.render(write_still=True)
        
        temp_filepath = os.path.join(inputs_folder, "Image0001.png")
        depth_filename, depth_filepath = get_filepath("depth_map.png", inputs_folder)
        shutil.move(temp_filepath, depth_filepath)  # Use shutil.move to rename file with overwrite
        self.report({'INFO'}, f"Depth map saved: {depth_filepath}")

        # Load image in the data block
        bpy.data.images.load(depth_filepath, check_existing=True)

        # Delete the previous input image from Blender's data
        current_workflow = scene.current_workflow
        previous_input_filepath = getattr(current_workflow, self.workflow_property)
        previous_input_filename = os.path.basename(previous_input_filepath)
        if bpy.data.images.get(previous_input_filename):
            image = bpy.data.images.get(previous_input_filename)
            bpy.data.images.remove(image)

        # Delete the previous input file
        if os.path.exists(previous_input_filepath):
            os.remove(previous_input_filepath)

        # Update the workflow property with the new input filepath
        current_workflow[self.workflow_property] = depth_filepath

        # Restore original render settings
        scene.render.filepath = original_filepath
        scene.render.image_settings.file_format = original_file_format
        scene.render.image_settings.color_mode = original_color_mode
        scene.render.image_settings.color_depth = original_color_depth
        scene.render.image_settings.compression = original_compression
        scene.display_settings.display_device = original_display_device
        scene.view_settings.view_transform = original_view_transform

        # Extraneous file generated by Blender renderer
        os.remove(extra_filepath)
        return {'FINISHED'}

def register():
    """Register the operator."""

    bpy.utils.register_class(ComfyBlenderOperatorRenderDepthMap)

def unregister():
    """Unregister the operator."""

    bpy.utils.unregister_class(ComfyBlenderOperatorRenderDepthMap)
